<?php

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_mlizingas_wps_commerce_payment_method_info()
{
    $paymentMethods = array();

    $paymentMethods['mlizingas_wps'] = array(
        'base' => 'commerce_mlizingas_wps',
        'title' => t('MokiLizingas WPS'),
        'short_title' => t('MokiLizingas'),
        'display_title' => t('Pay via MokiLizingas'),
        'terminal' => false,
        'offsite' => true,
        'offsite_autoredirect' => true,
    );

    return $paymentMethods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_mlizingas_wps_settings_form($settings = null)
{
    $form = array();

    $form['username'] = array(
        '#type' => 'textfield',
        '#title' => t('Username'),
        '#description' => t('MokiLizingas username'),
        '#default_value' => $settings['username'],
        '#required' => true,
    );

    $form['password'] = array(
        '#type' => 'textfield',
        '#title' => t('Password'),
        '#description' => t('MokiLizingas password'),
        '#default_value' => $settings['password'],
        '#required' => true,
    );

    $form['testMode'] = array(
        '#type' => 'radios',
        '#title' => t('Enable test mode?'),
        '#options' => array(
            '0' => t('No'),
            '1' => t('Yes'),
        ),
        '#default_value' => $settings['testMode'],
    );

    return $form;
}

/**
 * Payment method callback: adds a message to the submission form.
 */
function commerce_mlizingas_wps_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
    $form['mlizingas_wps_information'] = array(
        '#markup' => '<span>' . t('(Continue with checkout to complete payment via MokiLizingas.)') . '</span>'
    );

    return $form;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a WPS form.
 */
function commerce_mlizingas_wps_redirect_form($form, &$formState, $order, $paymentMethod)
{
    $paymentMethod['settings']['method_id'] = $paymentMethod['method_id'];

    return commerce_mlizingas_wps_order_form($form, $formState, $order, $paymentMethod['settings']);
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_mlizingas_wps_redirect_form_validate($order, $paymentMethod)
{
    return true;
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_mlizingas_wps_commerce_checkout_pane_info() {
    $checkout_panes = array();

    $checkout_panes['example_pane'] = array(
        'title' => t('Node form'),
        'base' => 'commerce_mlizingas_wps',
        'page' => 'complete',
        'callbacks' => array(
            'checkout_form_submit' => 'example_pane_checkout_form_submit',
        ),
        'fieldset' => FALSE,
    );

    return $checkout_panes;
}

/**
 * Authenticates with MokiLizingas, gets sessionID and creates redirect form.
 *
 * @param $form
 * @param $formState
 * @param $order
 * @param $settings
 *
 * @return array
 */
function commerce_mlizingas_wps_order_form($form, &$formState, $order, $settings)
{
    module_load_include('inc', 'commerce_mlizingas', 'MokiLizingas');

    $orderWrapper = entity_metadata_wrapper('commerce_order', $order);
    $billing = $orderWrapper->commerce_customer_billing->commerce_customer_address->value();
    $names = commerce_mlizingas_wps_get_name($billing['name_line']);

    // we will need to check payment status before returning user to commerce url, so we first will redirect to custom redirect url
    $returnUrl = url('commerce_mlizingas/return/' . $order->order_id . '/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
    $alertUrl = url('commerce_mlizingas/ipn/' . $settings['method_id'] . '|commerce_payment_mlizingas_wps', array('absolute' => TRUE));

    $mLizingas = new MokiLizingas($settings['username'], $settings['password'], $settings['testMode']);

    // check if we have previously created MokiLizingas transaction and if so load it.
    $result = db_query("SELECT transaction_id FROM {commerce_payment_transaction}
        WHERE instance_id = :instance_id AND order_id = :order_id",
        array(
            ':order_id' => $order->order_id, 
            ':instance_id' => $settings['method_id'] . '|commerce_payment_mlizingas_wps'
        ))
        ->fetchObject();
    
    if ($result != null) {
        $transaction = commerce_payment_transaction_load($result->transaction_id);
    } else {
        try {

            // Price in cents converting to price in LTL
            $orderAmount = $orderWrapper->commerce_order_total->amount->value() / 100;

            $mOrder = new MokilizingasOrder($order->order_id, $orderAmount);
            $mOrder->setFirstName($names['first_name']);
            $mOrder->setLastName($names['last_name']);

            $mLizingasSessionData = $mLizingas->startSession($mOrder, $returnUrl, $alertUrl);

        } catch (MokilizingasException $e) {
            watchdog('commerce_mlizingas_wps', $e->getMessage(), array(), WATCHDOG_ERROR);
            drupal_goto('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key']);
            drupal_set_message(t('Error occurred while redirecting to MokiLizingas.'), 'error');
        }

        $transaction = commerce_payment_transaction_new('mlizingas_wps', $order->order_id);
        $transaction->instance_id = $settings['method_id'] . '|commerce_payment_mlizingas_wps';
        $transaction->remote_id = $mLizingasSessionData->sessionId;
        $transaction->amount = $orderWrapper->commerce_order_total->amount->value();
        $transaction->currency_code = $orderWrapper->commerce_order_total->currency_code->value();
        $transaction->remote_status = 'INIT_AUTH';
        $transaction->payload['INIT_AUTH'] = $mLizingasSessionData;
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        $transaction->message = t('Successful authentication with MokiLizingas');
        commerce_payment_transaction_save($transaction);
    }

    $form['#action'] = $mLizingas->getRedirectUrl();

    $form['session_id'] = array(
        '#type' => 'hidden',
        '#value' => $transaction->remote_id
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Proceed to MokiLizingas'),
    );

    return $form;
}

function commerce_mlizingas_wps_get_name($name) {
    $names = explode(' ', $name);
    return array(
        'first_name' => $names[0],
        'last_name' => (isset($names[1]) ? $names[1] : ''),
    );
}